(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{450:function(t,a,e){"use strict";e.r(a);var s=e(55),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"scaffolding-arbitrary-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scaffolding-arbitrary-files"}},[t._v("#")]),t._v(" Scaffolding arbitrary files")]),t._v(" "),e("p",[t._v("Phabalicious supports not only scaffolding new applications, but arbitrary files. The command allows to be extended by socalled plugins which implements "),e("code",[t._v("Phabalicious\\Utilities\\PluginInterface")]),t._v(". The following plugin types are currently supported:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("transformers")]),t._v(", they take a yaml file as input, transform them to something different which will be written to the filesystem. transformer-plugins need to implement "),e("code",[t._v("Phabalicious\\Scaffolder\\Transformers\\DataTransformerInterface")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"running-the-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-the-command"}},[t._v("#")]),t._v(" Running the command")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("phab scaffold path/to/scaffold-file.yaml\n")])])]),e("p",[t._v("If you want to preview the command, add the "),e("code",[t._v("--dry-run")]),t._v("-option, this will output all commands to the console instead of executing them.")]),t._v(" "),e("h2",{attrs:{id:"the-scaffold-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-scaffold-file"}},[t._v("#")]),t._v(" the scaffold-file")]),t._v(" "),e("p",[t._v("The scaffold-file has the same structure as used for scaffolding applications. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requires")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("plugins")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" vendor/factorial"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("io/phab"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("entity"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("scaffolder/src/transformers\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image_styles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" image_style\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("block_content")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" block_content\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(block_content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" block_content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config/sync)\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(imagestyles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" image_styles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config/sync)\n")])])]),e("ul",[e("li",[e("code",[t._v("requires")]),t._v(" set the minimal phabalicious version this file works with.")]),t._v(" "),e("li",[t._v("the "),e("code",[t._v("plugins")]),t._v("-section reference paths to phabalicious-plugins. Every php file in that folder will be tried to be included and checked if they implement the required interfaces.")]),t._v(" "),e("li",[e("code",[t._v("scaffold")]),t._v(" contains a list of script lines where replacement patterns a]get replaced and run via bash, if not an internal command is used.")]),t._v(" "),e("li",[t._v("It may also contain "),e("code",[t._v("assets")]),t._v(" and/or "),e("code",[t._v("questions")]),t._v(" as described in "),e("RouterLink",{attrs:{to:"/app-scaffold.html"}},[t._v("here")]),t._v(", but they are not required.")],1)]),t._v(" "),e("h3",{attrs:{id:"list-of-supported-internal-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-of-supported-internal-commands"}},[t._v("#")]),t._v(" List of supported internal commands:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("log_message")]),t._v(" to print a message with a severity")]),t._v(" "),e("li",[e("code",[t._v("copy_assets")]),t._v(" to copy assets and apply replacement patterns")]),t._v(" "),e("li",[e("code",[t._v("alter_json_file")]),t._v(" which will alter an existing json file and change some data")]),t._v(" "),e("li",[e("code",[t._v("alter_yaml_file")]),t._v(" which will alter an existing yaml file and change some data")]),t._v(" "),e("li",[e("code",[t._v("assert_file")]),t._v(" throws an exception if the file does not exist")]),t._v(" "),e("li",[e("code",[t._v("assert_zero")]),t._v(" will stop the execution if the argument is not zero")]),t._v(" "),e("li",[e("code",[t._v("assert_non_zero")]),t._v(" will stop the execution if the argument is zero")]),t._v(" "),e("li",[e("code",[t._v("assert_contains")]),t._v(" will stop the execution if the argument does nt contain given string")]),t._v(" "),e("li",[e("code",[t._v("set_directory")]),t._v(" sets the working directory  to the argument")])]),t._v(" "),e("h3",{attrs:{id:"list-of-commands-which-needs-one-or-more-plugin-implementations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-of-commands-which-needs-one-or-more-plugin-implementations"}},[t._v("#")]),t._v(" List of commands which needs one or more plugin implementations")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("transform")]),t._v(" to transform a bunch of yml files to sth different. This command needs an implementation via plugin")])]),t._v(" "),e("h2",{attrs:{id:"computed-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed-values"}},[t._v("#")]),t._v(" Computed values")]),t._v(" "),e("p",[t._v("Similar to scripts, scaffolders do support computed values, by adding a "),e("code",[t._v("computedValues")]),t._v("-block to the yaml-file. Computed values get evaluated before the scaffold starts and store the results of the executed commands as variables which can be consumed later on in the script.")]),t._v(" "),e("p",[t._v("An example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("computedValues")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("usingOutdatedScaffolder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cd %rootFolder% "),e("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" grep "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("q drupal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("composer/drupal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("scaffold composer.json\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_nonzero(%computed.usingOutdatedScaffolder%"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(' "The project is using the outdated drupal scaffolder from contrib'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" please upgrade first"),e("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v('")\n')])])]),e("p",[t._v("The value for "),e("code",[t._v("usingOutdatedScaffolder")]),t._v(" gets evaluated before the scaffolder starts and get injected as "),e("code",[t._v("%computed.usingOutdatedScaffolder%")]),t._v(" which can be used in the script if needed.")]),t._v(" "),e("p",[t._v("If the command (in this example "),e("code",[t._v("grep")]),t._v(") produces an output, then the output is used for the stored value. If no output is created, then the exitcode will be used for the value. See the documentation about "),e("RouterLink",{attrs:{to:"/scripts.html"}},[t._v("scripts")]),t._v(" for more info.")],1),t._v(" "),e("h2",{attrs:{id:"callbacks-provided-by-phabalicious"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#callbacks-provided-by-phabalicious"}},[t._v("#")]),t._v(" Callbacks provided by phabalicious")]),t._v(" "),e("h3",{attrs:{id:"copy-assets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-assets"}},[t._v("#")]),t._v(" "),e("code",[t._v("copy_assets")])]),t._v(" "),e("p",[e("code",[t._v("copy_assets")]),t._v(" can be used in the scaffold-section to copy assets  into a specific location. The syntax is")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("copy_assets(<targetFolder>, <assetsKey=assets>, <fileExtensionForTwigParsing>)\n")])])]),e("p",[t._v("Phabalicious will load the asset-file, apply the replacement-patterns to the file-name ("),e("RouterLink",{attrs:{to:"/app-scaffold.html"}},[t._v("see")]),t._v(" the "),e("code",[t._v("deploymentAssetsfor")]),t._v(" an example) and parse the content via twig. The result will be stored inside the "),e("code",[t._v("<targetFolder>")]),t._v(". If "),e("code",[t._v("<fileExtensionForTwigParsing>")]),t._v(" is set, then only files with that extension will be handled by twig.")],1),t._v(" "),e("h3",{attrs:{id:"log-message-severity-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#log-message-severity-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("log_message(severity, message)")])]),t._v(" "),e("p",[e("code",[t._v("log_message")]),t._v(" will log a string to the output of phabalicious. It supports several notification levels, e.g.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" log_message(info"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("warning"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("success"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" the message to display)\n")])])]),e("h3",{attrs:{id:"alter-json-file-file-path-data-ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alter-json-file-file-path-data-ref"}},[t._v("#")]),t._v(" "),e("code",[t._v("alter_json_file(file_path, data_ref)")])]),t._v(" "),e("p",[t._v("This internal command can alter a json-file. It will merge the data from a yaml section into the json file. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dataToInject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" foo\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bar\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dict")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boo\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" far\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  alter_json_file(package.json"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dataToInject)\n")])])]),e("h3",{attrs:{id:"alter-yaml-file-file-path-data-ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alter-yaml-file-file-path-data-ref"}},[t._v("#")]),t._v(" "),e("code",[t._v("alter_yaml_file(file_path, data_ref)")])]),t._v(" "),e("p",[t._v("This internal command can alter a yaml-file. It will merge the data from a yaml section into the yaml file. Note that the order in the resulting yaml file might be different, also comments might get removed. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dataToInject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" foo\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bar\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dict")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boo\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" far\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  alter_yaml_file(config.yaml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dataToInject)\n")])])]),e("h3",{attrs:{id:"assert-zero-variable-error-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-zero-variable-error-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_zero(variable, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified argument is not zero.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_zero(%foo%"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo is not zero)\n")])])]),e("h3",{attrs:{id:"assert-non-zero-variable-error-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-non-zero-variable-error-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_non_zero(variable, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified argument is zero.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_non_zero(%foo%"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo is zero)\n")])])]),e("h3",{attrs:{id:"assert-contains-needle-haystack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-contains-needle-haystack"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_contains(needle, haystack)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if "),e("code",[t._v("needle")]),t._v(" is not found in "),e("code",[t._v("haystack")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_contains(foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Could not find foo)\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n")])])]),e("h3",{attrs:{id:"assert-file-file-path-error-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-file-file-path-error-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_file(file_path, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified file does not exist. Useful to check if the user is in the right directory.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_file(<file_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <error_message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h3",{attrs:{id:"assert-file-file-path-error-message-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-file-file-path-error-message-2"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_file(file_path, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified file does not exist. Useful to check if the user is in the right directory.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_file(<file_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <error_message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h3",{attrs:{id:"assert-file-file-path-error-message-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-file-file-path-error-message-3"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_file(file_path, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified file does not exist. Useful to check if the user is in the right directory.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_file(<file_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <error_message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h3",{attrs:{id:"set-directory-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-directory-directory"}},[t._v("#")]),t._v(" "),e("code",[t._v("set_directory(directory)")])]),t._v(" "),e("p",[t._v("This internal command will change the current directory for the following commands to "),e("code",[t._v("directory")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" set_directory(<directory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo $PWD "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will output <directory>")]),t._v("\n")])])]),e("h3",{attrs:{id:"confirm-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#confirm-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("confirm(message)")])]),t._v(" "),e("p",[t._v("This internal command will ask the user for confirmation before continuing showing "),e("code",[t._v("message")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" confirm(<message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h3",{attrs:{id:"scaffold-url-rootfolder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-url-rootfolder"}},[t._v("#")]),t._v(" "),e("code",[t._v("scaffold(url, rootFolder)")])]),t._v(" "),e("p",[t._v("This internal command will run another scaffolder from the given "),e("code",[t._v("url")]),t._v(" or filepath into the given "),e("code",[t._v("rootFolder")]),t._v(". Additional arguments in the form of "),e("code",[t._v("key=value")]),t._v(" will be passed to the scaffolder.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("questions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assets")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("themeFolder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%rootFolder%/web/themes/custom/some_frontend"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' scaffold("http'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('//foo.bar/d8.yml"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(' "%rootFolder%")\n    '),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' scaffold("http'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//foo.bar/d8"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('theme.yml"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(' "%themeFolder%")\n    '),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' scaffold("http'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//foo.bar/d8"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('module.yml"'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%rootFolder%/web/modules/custom/d8-module"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key1=value1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(' "key2=value2")\n')])])]),e("h3",{attrs:{id:"transform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transform"}},[t._v("#")]),t._v(" "),e("code",[t._v("transform")])]),t._v(" "),e("p",[t._v("This internal command will transform a list of yml files to sth different with the help of plugins. THe plugins need to be declared in the "),e("code",[t._v("plugins")]),t._v("-section.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(<nameOfPlugin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <yamlKeyToGetListOfFilesFrom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <targetPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("ul",[e("li",[e("code",[t._v("<nameOfPlugin>")]),t._v(" is the plugin-name to use for the trnasforming. Depends on the plugin implementation")]),t._v(" "),e("li",[e("code",[t._v("<yamlKeyToGetListOfFilesFrom>")]),t._v(" Similar to "),e("code",[t._v("copy_assets")]),t._v(", its a reference in the yaml-file which contains a list of files/ directories where phabalicious will try to load yaml files from.")]),t._v(" "),e("li",[e("code",[t._v("<targetPath>")]),t._v(" the target directory where the resulting files should be saved to.")])]),t._v(" "),e("h2",{attrs:{id:"twig-extensions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#twig-extensions"}},[t._v("#")]),t._v(" Twig extensions")]),t._v(" "),e("p",[e("code",[t._v("copy_assets")]),t._v(" will use twig to replace any configuration values inside the files with their values. You can use all functions and filters, available with twig.")]),t._v(" "),e("p",[t._v("Additionally these filters are available:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("md5")]),t._v(" e.g. "),e("code",[t._v(t._s(t._f("md5")("hello world")))]),t._v(" will result in "),e("code",[t._v("f0ef7081e1539ac00ef5b761b4fb01b3")])]),t._v(" "),e("li",[e("code",[t._v("slug")]),t._v(" e.g. "),e("code",[t._v(t._s("a string with ümlauts"))]),t._v(" will result in "),e("code",[t._v("a-string-with-umlauts")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);