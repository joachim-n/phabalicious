(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{449:function(e,s,t){"use strict";t.r(s);var a=t(55),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"passwords-and-secrets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#passwords-and-secrets"}},[e._v("#")]),e._v(" Passwords and secrets")]),e._v(" "),t("p",[e._v("You should not store any sensitive passwords in the fabfile. It's a possible security risk, as the file is part of your repository.")]),e._v(" "),t("p",[e._v("That's why phabalicious is heavily relying on key-forwarding for ssh-connections. If key-forwarding does not work, you might get a native ssh-password-prompt.")]),e._v(" "),t("p",[e._v("But sometimes it is unevitable to store atleast a reminder, that specific secrets are needed to get an application running or deploying.")]),e._v(" "),t("h2",{attrs:{id:"secrets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#secrets"}},[e._v("#")]),e._v(" Secrets")]),e._v(" "),t("p",[e._v("Phab 3.6 introduces a new way to handle secrets and passwords. The secrets are declared on a global scope via the secrets-key, and can be used via the new replacement-pattern "),t("code",[e._v("%secret.SECRET_ID%")]),e._v(" in the host configuration or in scripts. The actual secrets can be provided via environment-variables, retrieved by the 1Password-cli or passed via the new command line option "),t("code",[e._v("--secret ID=VALUE")]),e._v(".")]),e._v(" "),t("p",[e._v("So end users get a nice UI asking politely for the passwords, but it can be automated for CI/CD usage very easily.")]),e._v(" "),t("h3",{attrs:{id:"declare-secrets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#declare-secrets"}},[e._v("#")]),e._v(" Declare secrets")]),e._v(" "),t("p",[e._v("Declare them in the fabfile at root-level, the usual mechanisms like inheriting from external sources is available. Secrets are superimposed questions described "),t("RouterLink",{attrs:{to:"/scripts.html"}},[e._v("here")]),e._v(".")],1),e._v(" "),t("p",[e._v("An example:")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("secrets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("registry-password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("question")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Please provide the registry password for user `bot@mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("registry.io`\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("mysql-password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("question")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Please provide the Mysql password for the cluster\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("env")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" DB_PASSWORD\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePasswordId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 1234418718212s121\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePasswordVaultId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("768131213124")]),e._v("\n")])])]),t("p",[e._v("You can reference the declared secrets in host-configs")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("scripts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(' echo "the password for the registry is %secret.registry'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('password%"\n'),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hosts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hostA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("database")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("pass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%secret.mysql-password%"')]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" my_db\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n")])])]),t("p",[e._v("Phab will resolve the references on runtime and try to get the secret from")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("an uppercased environment variable e.g. "),t("code",[e._v("REGISTRY_PASSWORD")]),e._v(" (You can set the name of the environment variable with "),t("code",[e._v("env")]),e._v(", see above example, "),t("code",[e._v("DB_PASSWORD")]),e._v(")")])]),e._v(" "),t("li",[t("p",[e._v("from the command line via the option "),t("code",[e._v("--secret")]),e._v(", e.g. "),t("code",[e._v("--secret registry-password=123 --secret mysql-password=iamsecret")])])]),e._v(" "),t("li",[t("p",[e._v("from the local password file (see below)")])]),e._v(" "),t("li",[t("p",[e._v("from the 1password cli if it is installed, and the secret declaration has a "),t("code",[e._v("onePasswordId")]),e._v(" set. You need to be signed into 1password via the cli beforehand. (See the "),t("a",{attrs:{href:"https://support.1password.com/command-line-getting-started/",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),t("OutboundLink")],1),e._v(")")])]),e._v(" "),t("li",[t("p",[e._v("If a "),t("code",[e._v("onePasswordVaultId")]),e._v(" is set and a global config for "),t("code",[e._v("onePassword")]),e._v(" is available, then phab will try to lookup the secret using 1password connect. (See below)")])]),e._v(" "),t("li",[t("p",[e._v("As a last resort, the user get prompted for the password.")])])]),e._v(" "),t("h2",{attrs:{id:"using-1password-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-1password-cli"}},[e._v("#")]),e._v(" Using 1Password CLI")]),e._v(" "),t("p",[e._v("Make sure that you have "),t("code",[e._v("op")]),e._v(" up and running (see the "),t("a",{attrs:{href:"https://1password.com/downloads/command-line/",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),t("OutboundLink")],1),e._v("), and your secret has set an "),t("code",[e._v("onePasswordId")]),e._v(" as in the following example:")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("secrets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("mysql-password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("question")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Please provide the Mysql password for the cluster\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePasswordId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 1234418718212s121\n")])])]),t("p",[e._v("(You can get the id either by querying the database with "),t("code",[e._v("op")]),e._v(", or online via the web-ui).")]),e._v(" "),t("ol",[t("li",[e._v("Log into 1password cli with "),t("code",[e._v("eval (op signin <YOUR_TEAM_NAME>)")]),e._v(" (this is for the fish-shell, other shells might need a different syntax)")]),e._v(" "),t("li",[e._v("Run your phab command.")])]),e._v(" "),t("p",[e._v("If you are not logged in before phab needs the secret, the command will fail with an error message.")]),e._v(" "),t("p",[e._v("You can override the path to the "),t("code",[e._v("op")]),e._v("-executable by setting the environment variable "),t("code",[e._v("PHAB_OP_FILE_PATH")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"using-1password-connect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-1password-connect"}},[e._v("#")]),e._v(" Using 1password connect")]),e._v(" "),t("p",[e._v("Make sure, you have a runnning 1password-connect-instance (See 1passwords "),t("a",{attrs:{href:"https://support.1password.com/secrets-automation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),t("OutboundLink")],1),e._v("). Phab needs the api-endpoint and the token for the service to authenticate against it. Best practice is to store this data in an override-file either in your home-folder or up to 5 levels up from your project-folder. E.g. in "),t("code",[e._v("../../fabfile.local.override.yaml")]),e._v(" "),t("strong",[e._v("DO NOT COMMIT THE TOKEN INTO THE REPOSITORY")])]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePassword")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("endpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" https"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//vault.your"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("domain.tld\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("token")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" <your"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("jwt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("client-a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("endpoint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" <Another endpoint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("token")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("    <another JWT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("The jwt-token can also be passed via the environment variable "),t("code",[e._v("PHAB_OP_JWT_TOKEN__<TOKEN_ID>")]),e._v(", e.g. "),t("code",[e._v("PHAB_OP_JWT_TOKEN__CLIENT_A")]),e._v(". Then your secret needs to reference both the id and the vault-id as with this example:")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("secrets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("mysql-password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("question")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Please provide the Mysql password for the cluster\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePasswordId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 1234418718212s121\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onePasswordVaultId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("768131213124")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tokenId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("a\n")])])]),t("p",[e._v("Then just run your command as usual, phab will try to resolve the secret from 1password connect and use it.")]),e._v(" "),t("h2",{attrs:{id:"ftp-passwords"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ftp-passwords"}},[e._v("#")]),e._v(" FTP-passwords")]),e._v(" "),t("p",[e._v("Previous versions of phabalicious supported a different mechanism to store ftp credentials in a local file. The local file is still supported, but the automatic retrieval is deprecated, please use the approach outlined above.")]),e._v(" "),t("p",[e._v("If you are using the method "),t("code",[e._v("ftp-sync")]),e._v(" you can add the password to the fabfile, but we strongly discourage this.")]),e._v(" "),t("h3",{attrs:{id:"local-password-storage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-password-storage"}},[e._v("#")]),e._v(" Local password storage")]),e._v(" "),t("p",[e._v("If you want to store the password permanently so that phabalicious can pick them up, store them in your user-folder in a file called "),t("code",[e._v(".phabalicious-credentials")]),e._v(". The format is as follows")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v('"<user>@<scheme>://<host>:<port>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<password>"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v('"stephan@localhost:21"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("mysql-password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" iamsecret\n")])])]),t("p",[e._v("If no password is available, phabalicious will prompt for one.")])])}),[],!1,null,null,null);s.default=n.exports}}]);