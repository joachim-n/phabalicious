(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{452:function(t,a,s){"use strict";s.r(a);var e=s(55),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"running-phabalicious"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-phabalicious"}},[t._v("#")]),t._v(" Running phabalicious")]),t._v(" "),s("p",[t._v("To execute a command with the help of phabalicious, just")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-project-folder"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nphab --config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-config-key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("This will read your fabfile.yaml, look for "),s("code",[t._v("<your-config-key>")]),t._v(" in the host-section and run the command "),s("code",[t._v("<command>")])]),t._v(" "),s("p",[t._v("Add "),s("code",[t._v("-v")]),t._v(" ... "),s("code",[t._v("-vvv")]),t._v(" to increase the verbosity of phabalicious. You can get a list of all available options by running")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("phab "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"list-of-available-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-of-available-commands"}},[t._v("#")]),t._v(" List of available commands")]),t._v(" "),s("p",[t._v("You can get a list of "),s("RouterLink",{attrs:{to:"/commands.html"}},[t._v("available commands")]),t._v(" with")],1),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab list\n")])])]),s("h2",{attrs:{id:"command-line-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#command-line-options"}},[t._v("#")]),t._v(" Command line options")]),t._v(" "),s("h3",{attrs:{id:"v-vv-vvv-vvvv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-vv-vvv-vvvv"}},[t._v("#")]),t._v(" -v/ -vv/ -vvv/ -vvvv")]),t._v(" "),s("p",[t._v("Setting this option will increase the verbosity of phabalicious. Without this settings you'll get only warnings and errors and some informational stuff. If you encounter a problem try increasing the verbosity-level.")]),t._v(" "),s("h3",{attrs:{id:"config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[t._v("#")]),t._v(" --config")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab --config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("Most of the phabalicious commands need the option "),s("code",[t._v("config")]),t._v(". Setting the option will lookup "),s("code",[t._v("<your-config>")]),t._v(" in the "),s("code",[t._v("hosts")]),t._v("-section of your "),s("code",[t._v("fabfile.yaml")]),t._v(" and the data will be used to run your command with the correct environment.")]),t._v(" "),s("h3",{attrs:{id:"offline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#offline"}},[t._v("#")]),t._v(" --offline")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab --offline"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" --config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("This command will disable remote configuration files. As phabalicious keeps copies of remote configuration-files in "),s("code",[t._v("~/.phabalicious")]),t._v(" it will try to load the configuration-file from there.")]),t._v(" "),s("h3",{attrs:{id:"fabfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fabfile"}},[t._v("#")]),t._v(" --fabfile")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Phab --fabfile"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-your-fabfile "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("p",[t._v("This will try to load the "),s("code",[t._v("fabfile.yaml")]),t._v(" from a different location: "),s("code",[t._v("path-to-your-fabfile")])]),t._v(" "),s("h3",{attrs:{id:"blueprint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blueprint"}},[t._v("#")]),t._v(" --blueprint")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab --config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --blueprint"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[s("code",[t._v("blueprint")]),t._v(" will try to load a blueprint-template from the fabfile.yaml and apply the input given as "),s("code",[t._v("<branch-name>")]),t._v(" to the template. This is helpful if you want to create/ use a new configuration which has some dynamic parts like the name of the database, the name of the docker-container, etc.")]),t._v(" "),s("p",[t._v("The command will look first in the host-config for the property "),s("code",[t._v("blueprint")]),t._v(", afterwards in the dockerHost-configuration "),s("code",[t._v("<config-name>")]),t._v(" and eventually in the global namespace. If you want to print the generated configuration as yaml, then use the "),s("code",[t._v("output")]),t._v("-command. The computed configuration is used as the current configuration, that means, you can run other commands against the generated configuration.")]),t._v(" "),s("p",[s("strong",[t._v("Available replacement-patterns")]),t._v(" and what they do.")]),t._v(" "),s("p",[s("em",[t._v("Input is "),s("code",[t._v("feature/XY-123-my_Branch-name")]),t._v(", the project-name is "),s("code",[t._v("Example project")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Replacement Pattern")]),t._v(" "),s("th",[t._v("value")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("%slug.with-hyphens.without-feature%")])]),t._v(" "),s("td",[t._v("xy-123-my-branch-name")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%slug.with-hyphens%")])]),t._v(" "),s("td",[t._v("feature-xy-123-my-branch-name")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%project-slug.with-hypens%")])]),t._v(" "),s("td",[t._v("example-project")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%slug%")])]),t._v(" "),s("td",[t._v("featurexy123mybranchname")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%project-slug%")])]),t._v(" "),s("td",[t._v("exampleproject")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%project-identifier%")])]),t._v(" "),s("td",[t._v("Example project")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%identifier%")])]),t._v(" "),s("td",[t._v("feature/XY-123-my_Branch-name")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("%slug.without-feature%")])]),t._v(" "),s("td",[t._v("xy123mybranchname")])])])]),t._v(" "),s("p",[t._v("Here's an example blueprint:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("blueprint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("inheritsFrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//some.host/data.yaml\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%project-slug%-%slug.with-hyphens.without-feature%.some.host.tld'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%identifier%'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("database")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%slug.without-feature%_mysql'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("projectFolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%project-slug%--%slug.with-hyphens.without-feature%'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vhost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%project-slug%-%slug.without-feature%.some.host.tld'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%project-slug%%slug.without-feature%_web_1'")]),t._v("\n")])])]),s("p",[t._v("And the output of "),s("code",[t._v("phab --blueprint=feature/XY-123-my_Branch-name --config=<config-name> output")]),t._v(" is")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("phbackend-xy-123-my-branch-name.some.host.tld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" feature/XY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("123"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("my_Branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" phbackend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("123"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name.some.host.tld\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("database")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" xy123mybranchname_mysql\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" phbackendxy123mybranchname_web_1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("projectFolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" phbackend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("123"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vhost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" phbackend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xy123mybranchname.some.host.tld\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("inheritsFrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//some.host/data.yaml\n")])])]),s("p",[s("strong",[t._v("Note")])]),t._v(" "),s("p",[t._v("You can create new configurations via the global "),s("code",[t._v("blueprints")]),t._v("-settings:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("blueprints:\n  - configName: mbb\n    variants:\n      - de\n      - en\n      - it\n      - fr\n")])])]),s("p",[t._v("will create 4 new configurations using the blueprint-config "),s("code",[t._v("mbb")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Note")])]),t._v(" "),s("p",[t._v("You can even create a new host-config from a blueprint and override some of its setting:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("hosts:\n  myHost:\n    inheritFromBluePrint:\n      config: my-blueprint-config\n      variant: my-variable\n    otherSettings...\n")])])]),s("h3",{attrs:{id:"variants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variants"}},[t._v("#")]),t._v(" --variants")]),t._v(" "),s("p",[t._v("When using "),s("code",[t._v("blueprint")]),t._v(", you can run one command on multiple variants Just pass the "),s("code",[t._v("--variants")]),t._v("-flag with the wanted variants.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("phab --config=my-blueprinted-config --variants=all  about\nphab --config=my-blueprinted-config --variants=de,it,fr  about\n\n")])])]),s("p",[t._v("This will prompt you with a list of commands which phab will run and ask for confirmation.")]),t._v(" "),s("h3",{attrs:{id:"s-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#s-set"}},[t._v("#")]),t._v(" -s / --set")]),t._v(" "),s("p",[t._v("You can override existing configuration using the dot notation and pass arbitrary values to phabalicious. Currently this is supported for host configs and dockerhost configs.")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hosts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" example.test\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("To set a value from command line just pass it via the "),s("code",[t._v("--set")]),t._v("-option:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab -cexample about --set host.host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("overriden.test --set host.port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n")])])]),s("h3",{attrs:{id:"a-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-arguments"}},[t._v("#")]),t._v(" -a / --arguments")]),t._v(" "),s("p",[t._v("Pass arbitrary arguments to scripts or other parts. Passed arguments can be consumed by scripts using "),s("code",[t._v("%arguments.<name>%")]),t._v(" syntax. An example:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("scripts:\n  test-arguments:\n    - echo %arguments.message%\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("phab -c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("yourconfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" script test-arguments --arguments "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("\n")])])]),s("h3",{attrs:{id:"offline-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#offline-2"}},[t._v("#")]),t._v(" --offline")]),t._v(" "),s("p",[t._v("Prevent loading of additional data from remote. Helpful when you do not have an internet connection.")]),t._v(" "),s("h3",{attrs:{id:"skip-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#skip-cache"}},[t._v("#")]),t._v(" --skip-cache")]),t._v(" "),s("p",[t._v("Phab caches remote files in "),s("code",[t._v("~/.phabalicious")]),t._v(" and will use the cached version if it not older than an hour. If you think you get outdated information, pass this flag. It makes sure, that all remote data is read from remote and updates the file-cache.")]),t._v(" "),s("h2",{attrs:{id:"used-environment-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-environment-variables"}},[t._v("#")]),t._v(" Used environment variables:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PHABALICIOUS_EXECUTABLE")]),t._v(" allows to override the phab executable when using variants")]),t._v(" "),s("li",[s("code",[t._v("PHABALICIOUS_DEFAULT_CONFIG")]),t._v(" sets the default config name to use, when no config name was given via the "),s("code",[t._v("--config")]),t._v(" flag")]),t._v(" "),s("li",[s("code",[t._v("PHABALICIOUS_FORCE_GIT_ARTIFACT_DEPLOYMENT")]),t._v(" forces the git artifact deployment.")]),t._v(" "),s("li",[s("code",[t._v("PHAB_OP_FILE_PATH")]),t._v(" file path to "),s("RouterLink",{attrs:{to:"/passwords.html"}},[t._v("1password")]),t._v(" executable.")],1),t._v(" "),s("li",[s("code",[t._v("PHAB_OP_JWT_TOKEN__<TOKEN_ID>")]),t._v(" token for "),s("RouterLink",{attrs:{to:"/password.html"}},[t._v("1password")]),t._v(" connect")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);